<실습 목표>

4.0 프레임워크 구조의 기술적 이해
- 비즈니스 로직의 동적 구성 및 실행
- 의존성 관리
- 비동기 처리

모던 자바스크립트의 이해
- promise chain, async herable, middleave pattern
- decoratorbeen container
- async/await, promise, pub/sub pattern

<개발환경>
- express(db X json file O)
- typescript
- html


<실습내용>
오늘부터 한 거 계속 리팩토링..
내일 4시까지.
오늘 한거는 push해놓기.

로그인
- 유저별 정책 로드(관리자:모든권한, 일반:생성권한, 읽기 권한)
>>정책실행 - 새로운 정책 추가하기
>>성공시 - 유저별 화면 다르게(버튼 목록 다르게)
>>실패시 - 에러 메세지


버튼 목록
- 신규버튼
- 목록보기 버튼
 >> 지정된 유저

------------------------------------------------------------------

> npm init
> npm install express

실행하기
> node 파일경로

package.json 고쳐서 실행
"scripts": {
    "start": "node ./src/server/server.js",	// 추가
> npm run start


정적파일 로드하기
public 디렉토리에 정적파일(login.html) 작성.
server.js에 app.use(express.static('public'));추가

-----------------------------------------------------------------


-login.html
id
pw
로그인버튼

-main.html : 로그인이 되면 이동되는 페이지 (window팝업 or layer 팝업)
신규버튼   register.html(팝업)     				id/pw 받음
(기능 : 관리자와 write권한이 있는 유저만 보인다.)		com_code - 회사코드 - select(70000,80000,90000)
(클릭시 팝업 열고 이전 화면은 클릭 안되게, 			admin - 체크박스로 추가 (admin 체크시 write,read 두가지 권한 가짐)
등록 팝업이 닫히면 클릭 가능하게 한다.)			permission(write, read)권한 - 체크박스로 추가 
							

목록버튼   list.html(팝업)             				id/pw/permission 목록 보여줌 (목록 뿌리면 됨)
(기능 : 서버에서 체크 - 목록버튼 클릭시 해당 유저가 read권한이 있는지 체크. 없으면 alert)

							db는 없고 user.json 사용. - json 데이터 설계.. - 저장시 파일에 쓰면되고, 뿌릴때는 파일을 읽으면됨.
							처음에 user.json에 admin계정 하나 넣어놓기. (로그인해야하므로)



템플릿 엔진 ejs쓴다.
뷰엔진 = cshtml
defualt 경로는 views 폴더. (템플릿 루트)
session-서버에 저장 / 쿠기-클라이언트에 저장.

성공한 user정보 - 분기처리.

-------------------------------------------------------------------------------------
-로그인 예외 처리
활성화된 회사 코드인지(company.json, 계약 기간이 남았는지 체크)
휴면계정 계정인지(30일 이내 로그인 안했을경우 휴먼계정 처리)
휴면 계정은 특별한건 없고 유저별로 마지막 로그인시간 기록해 두고 로그인시 현재시간과 비교해서 30일 경과 됐으면 휴면계정으로 판단하면 됩니다.

npm install moment >> 현재시간얻기위해설치.